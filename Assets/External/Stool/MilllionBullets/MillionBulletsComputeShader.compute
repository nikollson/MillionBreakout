#pragma kernel PopIndices
#pragma kernel UpdateState
#pragma kernel AddStates

#define THREADS 32

struct State
{
	float3 Pos;
	int Enable;
	int IsDead;
};

int N;
AppendStructuredBuffer<int> AppendQueue;
ConsumeStructuredBuffer<int> ConsumeQueue;
RWStructuredBuffer<int> PushQueueCounter;
RWStructuredBuffer<int> InoutBuffer;
RWStructuredBuffer<State> States;
RWStructuredBuffer<State> StateInputs;

[numthreads(THREADS, 1, 1)]
void PopIndices(int3 id : SV_DispatchThreadID)
{
	if (id.x >= N)return;
	InoutBuffer[id.x] = ConsumeQueue.Consume();
}


[numthreads(THREADS, 1, 1)]
void UpdateState(int3 id : SV_DispatchThreadID, int3 threadID : SV_GroupThreadID)
{
	if (States[id.x].IsDead && States[id.x].Enable)
	{
		States[id.x].Enable = 0;
		InterlockedAdd(PushQueueCounter[threadID.x], 1);
		AppendQueue.Append(id.x);
	}
}

[numthreads(THREADS,1,1)]
void AddStates(int3 id : SV_DispatchThreadID)
{
	if (id.x >= N)return;
	States[InoutBuffer[id.x]] = StateInputs[id.x];
}